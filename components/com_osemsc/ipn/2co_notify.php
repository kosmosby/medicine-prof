<?php/** * @version     5.0 + * @package        Open Source Membership Control - com_osemsc * @subpackage    Open Source Access Control - com_osemsc * @author        Open Source Excellence (R) {@link  http://www.opensource-excellence.com} * @author        Created on 15-Nov-2010 * @license GNU/GPL http://www.gnu.org/copyleft/gpl.html * * *  This program is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with this program.  If not, see <http://www.gnu.org/licenses/>. *  @Copyright Copyright (C) 2010- Open Source Excellence (R); */$messages= array();$subscription_id = $_POST['vendor_order_id'];if (!empty($subscription_id)){	header("HTTP/1.0 200 OK");	//global $mosConfig_absolute_path, $mosConfig_live_site, $mosConfig_lang, $database, $mailfrom, $fromname;	/*** access Joomla's configuration file ***/	// Set flag that this is a parent file	define('_JEXEC', 1);	define('JPATH_BASE', dirname(dirname(dirname(dirname(__FILE__)))));	define('DS', DIRECTORY_SEPARATOR);	require_once(JPATH_BASE.DS.'includes'.DS.'defines.php');	require_once(JPATH_BASE.DS.'includes'.DS.'framework.php');	/**	 * CREATE THE APPLICATION	 *	 * NOTE :	 */	$mainframe= & JFactory :: getApplication('site');	jimport('joomla.plugin.helper');	/*** END of Joomla config ***/	/*** OSE part ***/	require_once(JPATH_BASE.DS."components".DS."com_osemsc".DS."init.php");	/*** END OSE part ***/	$db= oseDB :: instance();	$where= array();	$where[]= "`order_number`=".$db->quote($_POST['vendor_order_id']);	//$where[] = "`entry_type`= 'msc'" ;	$payment= oseRegistry :: call('payment')->getInstance('Order');	$orderInfo = $payment->getOrder($where, 'obj');	$apiEmail= oseRegistry :: call('member')->getInstance('email');	$oseMscConfig= oseRegistry :: call('msc')->getConfig(null, 'obj');	$hostname = "https://www.2checkout.com";	if(empty($orderInfo))	{		$mailsubject= "2CO IPN Fatal Error on your Site";		$mailbody= "Can not search any order information with utilizing the order number feedbacked by The 2CO IPN					----------------------------------\n					Hostname: $hostname\n					Invoice: ".$subscription_id."\n";		$emailObj= new stdClass();		$emailObj->subject= $mailsubject;		$emailObj->body= $mailbody;		$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);		$res= 'Other Error!';	}	// test message type	$message_type = $_POST['message_type'];	if( !in_array($message_type,array('ORDER_CREATED',		'FRAUD_STATUS_CHANGED', 'SHIP_STATUS_CHANGED',		'INVOICE_STATUS_CHANGED', 'REFUND_ISSUED',		'RECURRING_INSTALLMENT_SUCCESS', 'RECURRING_INSTALLMENT_FAILED',		'RECURRING_STOPPED', 'RECURRING_COMPLETE', 'RECURRING_RESTARTED')) )	{		// ERROR	}	$invoice_status =  empty($_POST['invoice_status'])?null:$_POST['invoice_status'];	$message_type =  empty($_POST['message_type'])?null:$_POST['message_type'];	$fraud_status =  empty($_POST['fraud_status'])?null:$_POST['fraud_status'];	$invoice_id = empty($_POST['invoice_id'])?null:$_POST['invoice_id'];	$sale_id =  empty($_POST['sale_id'])?null:$_POST['sale_id'];	$order_id= $orderInfo->order_id;	$member_id= $orderInfo->user_id;	$orderInfoParams= oseJson :: decode($orderInfo->params);	//$query= " SELECT * FROM `#__osemsc_order_item`".		" WHERE order_id = '{$order_id}'";	//$db->setQuery($query);	//$orderItems= oseDB :: loadList('obj');	$twocheckoutSecret = oseObject::getValue($oseMscConfig,'twocheckoutSecret');	$md5Valid = true;	if(!empty($twocheckoutSecret))	{		// md5 validate		$md5_hash = $_POST['md5_hash'];		$sale_id = $_POST['sale_id'];		$twocheckoutVendorId = oseObject::getValue($oseMscConfig,'twocheckoutVendorId');		$md5 = md5($sale_id.$twocheckoutVendorId.$invoice_id.$twocheckoutSecret);		if(strtolower($md5) != strtolower($md5_hash))		{			$md5Valid = false;		}	}	switch($message_type)	{		case('ORDER_CREATED'):			if($invoice_status == 'approved' && $fraud_status != 'fail' && $md5Valid)			{				$payment->confirmOrder($order_id, array(), 0, $member_id);				if(!empty($sale_id))				{					$payment->updateOrder($order_id, "confirmed",array('payment_serial_number'=>$sale_id));				}				$mailsubject= "2CO IPN on your Site: Transaction Succeed";				$mailbody = "Dear Administrator, <br/><br/>";				$mailbody .= "a 2CO transaction for you has been made on your website!<br />";				$mailbody .= "-----------------------------------------------------------<br />";				$mailbody .= "2CO Unique Transaction ID: ".$invoice_id."<br />";				$mailbody .= "Order ID: {$order_id}<br />";				$mailbody .= "Payment Status returned by 2CO: completed<br />";									$emailObj= new stdClass();				$emailObj->subject= $mailsubject;				$emailObj->body= $mailbody;				$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);			}			break;		case('FRAUD_STATUS_CHANGED'):			// notify admin if not pass			if($fraud_status == 'fail' || $md5Valid)			{				$mailsubject= "2CO IPN on your Site: FRAUD STATUS CHANGED";				$mailbody = "Dear Administrator, <br/><br/>";				$mailbody .= "a 2CO transaction fraud status has been change on your website!<br />";				$mailbody .= "-----------------------------------------------------------<br />";				$mailbody .= "2CO Unique Transaction ID: ".$invoice_id."<br />";				$mailbody .= "Order ID: {$order_id}<br />";				$mailbody .= "Payment Status returned by 2CO: {$fraud_status}<br />";									$emailObj= new stdClass();				$emailObj->subject= $mailsubject;				$emailObj->body= $mailbody;				$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);			}			break;		case('INVOICE_STATUS_CHANGED'):			$mailsubject= "2CO IPN on your Site: INVOICE STATUS CHANGED";			$mailbody = "Dear Administrator, <br/><br/>";			$mailbody .= "a 2CO transaction status has been change on your website!<br />";			$mailbody .= "-----------------------------------------------------------<br />";			$mailbody .= "2CO Unique Transaction ID: ".$invoice_id."<br />";			$mailbody .= "Order ID: {$order_id}<br />";			$mailbody .= "Payment Status returned by 2CO: {$fraud_status}<br />";			$emailObj= new stdClass();			$emailObj->subject= $mailsubject;			$emailObj->body= $mailbody;			$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);			break;		case('RECURRING_INSTALLMENT_SUCCESS'):							break;		case('RECURRING_STOPPED'):		case('RECURRING_INSTALLMENT_FAILED'):			$list= $payment->refundOrder($order_id);			$payment->updateOrder($order_id,'failed');							$mailsubject= "2CO IPN on your Site: Recurring Failed/Stop";			$mailbody = "Dear Administrator, <br/><br/>";			$mailbody .= "A subscription payment transaction was failed or stopped on your website!<br/><br/>";			$mailbody .= "Please check this transaction on 2CO and contact the subscriber, then take actions to update the user's membership manually.<br/><br/>";			$mailbody .= "-----------------------------------------------------------<br/><br/>";			$mailbody .= "2CO Subscriber ID: ". $invoice_id ."<br />";			$mailbody .= "Member ID: ".$member_id."<br /><br />";			$mailbody .= "Order ID: {$order_id}<br/><br/>";			$mailbody .= "Payment Status returned by 2CO: ".$message_type."<br/><br/>";							$emailObj= new stdClass();			$emailObj->subject= $mailsubject;			$emailObj->body= $mailbody;			$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);			break;		case('RECURRING_COMPLETE'):			break;		default:			break;	}	/*	 if (($invoice_status == "deposited" && $fraud_status == "pass") || $message_type=="RECURRING_INSTALLMENT_SUCCESS")	{	$payment= oseRegistry :: call('payment')->getInstance('Order');	$payment->confirmOrder($order_id, array(), 0, $member_id);	}	elseif ($message_type=="RECURRING_STOPPED" || $message_type=="RECURRING_INSTALLMENT_FAILED" || $invoice_status == "pending")	{	 	if($invoice_status == "pending" || $message_type=="RECURRING_INSTALLMENT_FAILED")	{	oseRegistry :: call('payment')->updateOrder($order_id, "pending");	exit;	}	//$arr = array('allow_work'=>true,'msc_id'=>$msc_id,'member_id'=>$member_id,'master'=>true);	$apiEmail->sendCancelOrderEmail(array('orderInfo'=>$orderInfo));	oseRegistry :: call('payment')->updateOrder($order_id, "cancelled");	$query = " SELECT entry_id FROM `#__osemsc_order_item`"	." WHERE `order_id` = '{$order_id}'"	;	$db->setQuery($query);	$msc_id = $db->loadResult();	$paymentOrder= $payment->getInstance('Order');	$paymentOrder->updateMembership($msc_id, $member_id, $order_id, 'm');	}*/}?>