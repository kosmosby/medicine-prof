<?php/** * @version     5.0 + * @package        Open Source Membership Control - com_osemsc * @subpackage    Open Source Access Control - com_osemsc * @author        Open Source Excellence (R) {@link  http://www.opensource-excellence.com} * @author        Created on 15-Nov-2010 * @license GNU/GPL http://www.gnu.org/copyleft/gpl.html * * *  This program is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with this program.  If not, see <http://www.gnu.org/licenses/>. *  @Copyright Copyright (C) 2010- Open Source Excellence (R); */if ($_POST) {	header("HTTP/1.0 200 OK");	define('_JEXEC', 1);	define('JPATH_BASE', dirname(dirname(dirname(dirname(__FILE__)))));	define('DS', DIRECTORY_SEPARATOR);	require_once(JPATH_BASE . DS . 'includes' . DS . 'defines.php');	require_once(JPATH_BASE . DS . 'includes' . DS . 'framework.php');	/**	 * CREATE THE APPLICATION	 *	 * NOTE :	 */	$mainframe = JFactory::getApplication('site');	jimport('joomla.plugin.helper');	/*** END of Joomla config ***/	/*** OSE part ***/	require_once(JPATH_BASE . DS . "components" . DS . "com_osemsc" . DS . "init.php");	foreach ($_POST as $key => $value) {		//JRequest::setVar($key,$value);	}	/*** END OSE part ***/	// Notify string	$serial_number = (isset($_POST['serial-number'])) ? trim(stripslashes($_POST['serial-number'])) : '';	$google_order_number = (isset($_POST['google-order-number'])) ? trim(stripslashes($_POST['google-order-number'])) : '';	$fulfillment_order_state = (isset($_POST['fulfillment-order-state'])) ? trim(stripslashes($_POST['fulfillment-order-state'])) : '';	$financial_order_state = (isset($_POST['financial-order-state'])) ? trim(stripslashes($_POST['financial-order-state'])) : '';	$new_financial_order_state = (isset($_POST['new-financial-order-state'])) ? trim(stripslashes($_POST['new-financial-order-state'])) : '';	$order_total = (isset($_POST['order-total'])) ? trim(stripslashes($_POST['order-total'])) : '';	$order_total_currency = (isset($_POST['order-total_currency'])) ? trim(stripslashes($_POST['order-total_currency'])) : '';	$timestamp = (isset($_POST['timestamp'])) ? trim(stripslashes($_POST['timestamp'])) : '';	$payer_email = (isset($_POST['buyer-billing-address_email'])) ? trim(stripslashes($_POST['buyer-billing-address_email'])) : '';	$merchant_item_id = (isset($_POST['shopping-cart_items_item-1_merchant-item-id'])) ? trim(stripslashes($_POST['shopping-cart_items_item-1_merchant-item-id'])) : '';	$invoice = (isset($_POST['shopping-cart_items_item-1_item-description'])) ? urldecode(trim(stripslashes($_POST['shopping-cart_items_item-1_item-description']))) : '';	if (isset($invoice) && !empty($invoice)) {		$invoiceArray = explode("||", $invoice);		if (!isset($invoiceArray[1])) {			$invoiceArray = explode(":", $invoice);		}		$invoice = $invoiceArray[1];		$db = JFactory::getDBO();		$query = "UPDATE `#__osemsc_order` SET `payment_serial_number` = ".$db->Quote($google_order_number)."  WHERE `order_number` = " . $db->quote($invoice);		$db->setQuery($query);		$db->query();	}	/**--------------------------------------------		 * Create message to post back to PayPal...		 * Open a socket to the PayPal server...		 *--------------------------------------------*/	$apiEmail = oseRegistry::call('member')->getInstance('email');	$oseMscConfig = oseMscConfig::getConfig(null, 'obj');	$google_merchant_id = $oseMscConfig->google_checkout_id;	$google_merchant_key = $oseMscConfig->google_checkout_key;	$test_mode = $oseMscConfig->gco_testmode;	$remote_hostname = $_SERVER['REMOTE_ADDR'];	if ($test_mode) {		$hostname = 'sandbox.google.com/checkout';	} else {		$hostname = 'checkout.google.com';	}	$schema_url = $hostname . "/api/checkout/v2/requestForm/Merchant/" . $google_merchant_id;	switch ($_POST['_type']) {	case ("new-order-notification"):		$acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" . "<notification-acknowledgment xmlns=\"" . $schema_url . "\"";		if (isset($serial_number)) {			$acknowledgment .= " serial-number=\"" . $serial_number . "\"";		}		$acknowledgment .= " />";		echo $acknowledgment;		break;	case ("order-state-change-notification"):		$acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" . "<notification-acknowledgment xmlns=\"" . $schema_url . "\"";		if (isset($serial_number)) {			$acknowledgment .= " serial-number=\"" . $serial_number . "\"";		}		$acknowledgment .= " />";		echo $acknowledgment;		break;	case ("charge-amount-notification"):		$acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" . "<notification-acknowledgment xmlns=\"" . $schema_url . "\"";		if (isset($serial_number)) {			$acknowledgment .= " serial-number=\"" . $serial_number . "\"";		}		$acknowledgment .= " />";		echo $acknowledgment;		break;	case ("chargeback-amount-notification"):	case ("refund-amount-notification"):	case ("risk-information-notification"):		$acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" . "<notification-acknowledgment xmlns=\"" . $schema_url . "\"";		if (isset($serial_number)) {			$acknowledgment .= " serial-number=\"" . $serial_number . "\"";		}		$acknowledgment .= " />";		echo $acknowledgment;		break;	case ("cancelled-subscription-notification"):		if (!empty($google_order_number)) {			// Get the Order Details from the database			$db = oseDB::instance();			$where = array();			$where[] = "`payment_serial_number` = " . $db->quote($google_order_number);			$payment = oseRegistry::call('payment');			$orderInfo = $payment->getOrder($where, 'obj');			$order_id = $orderInfo->order_id;			$member_id = $orderInfo->user_id;			$apiEmail->sendCancelOrderEmail(array('orderInfo' => $orderInfo));			oseRegistry::call('payment')->updateOrder($order_id, "cancelled");			$query = " SELECT entry_id FROM `#__osemsc_order_item` WHERE `order_id` = ".(int)$order_id;			$db->setQuery($query);			$msc_id = $db->loadResult();			$paymentOrder = oseRegistry::call('payment')->getInstance('Order');			$paymentOrder->updateMembership($msc_id, $member_id, $order_id, 'm');		}		break;	case ("authorization-amount-notification"):		$acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" . "<notification-acknowledgment xmlns=\"" . 'http://' . $hostname . '/schema/2' . "\"";		if (isset($serial_number)) {			$acknowledgment .= " serial-number=\"" . $serial_number . "\"";		}		$acknowledgment .= " />";		echo $acknowledgment;		$avsresponse = trim(stripslashes($_POST['avs-response']));		$cvnresponse = trim(stripslashes($_POST['cvn-response']));		$financial_order_state = trim(stripslashes($_POST['order-summary_financial-order-state']));		if ($avsresponse == "Y" && $cvnresponse == "M") {			if (!empty($google_order_number)) {				// Get the Order Details from the database				$db = oseDB::instance();				$where = array();				$where[] = "`payment_serial_number` = " . $db->quote($google_order_number);				$payment = oseRegistry::call('payment');				$orderInfo = $payment->getOrder($where, 'obj');				//$sql = oseDB::instance()->_sql;				$payment_status = "Payment Completed";				$mailsubject = "GoogleCheckout IPN txn on your site";				$mailbody = "Dear Administrator,<br /><br />";				$mailbody .= "a GoogleCheckout transaction for you has been made on your website!<br />";				$mailbody .= "-----------------------------------------------------------<br />";				$mailbody .= "GoogleCheckout Unique Transaction ID: " . $google_order_number . "<br />";				$mailbody .= "Order ID: " . $orderInfo->order_id . "<br />";				$mailbody .= "Payment Status returned by GoogleCheckout<br />";				$mailbody .= "AVS Response: " . $avsresponse . "<br />";				$mailbody .= "CVN Response: " . $cvnresponse . "<br />";				$emailObj = new stdClass();				$emailObj->subject = $mailsubject;				$emailObj->body = $mailbody;				$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);				$order_id = $orderInfo->order_id;				$member_id = $orderInfo->user_id;				$paymentOrder = oseRegistry::call('payment')->getInstance('Order');				$paymentOrder->confirmOrder($order_id, array(), 0, $member_id);			}		}		break;	default:		$msg = '400 Bad Request';		header('HTTP/1.0 400 Bad Request');		echo $msg;		break;	}}?>