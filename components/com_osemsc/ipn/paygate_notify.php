<?php/** * @version     5.0 + * @package        Open Source Membership Control - com_osemsc * @subpackage    Open Source Access Control - com_osemsc * @author        Open Source Excellence (R) {@link  http://www.opensource-excellence.com} * @author        Created on 15-Nov-2010 * @license GNU/GPL http://www.gnu.org/copyleft/gpl.html * * *  This program is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with this program.  If not, see <http://www.gnu.org/licenses/>. *  @Copyright Copyright (C) 2010- Open Source Excellence (R); */if ($_POST){	header("HTTP/1.0 200 OK");	//global $mosConfig_absolute_path, $mosConfig_live_site, $mosConfig_lang, $database, $mailfrom, $fromname;	/*** access Joomla's configuration file ***/	// Set flag that this is a parent file	define('_JEXEC', 1);	define('JPATH_BASE', dirname(dirname(dirname(dirname(__FILE__)))));	define('DS', DIRECTORY_SEPARATOR);	require_once(JPATH_BASE.DS.'includes'.DS.'defines.php');	require_once(JPATH_BASE.DS.'includes'.DS.'framework.php');	/**	 * CREATE THE APPLICATION	 *	 * NOTE :	 */	$mainframe= & JFactory :: getApplication('site');	jimport('joomla.plugin.helper');	/*** END of Joomla config ***/	/*** OSE part ***/	require_once(JPATH_BASE.DS."components".DS."com_osemsc".DS."init.php");	/*** END OSE part ***/	$oseMscConfig= oseRegistry :: call('msc')->getConfig(null, 'obj');	$apiEmail= oseRegistry :: call('member')->getInstance('email');	$paygate_id= $oseMscConfig->paygate_id;	$paygate_key= $oseMscConfig->paygate_key;	$config= new JConfig();	$mailfrom= $config->mailfrom;	$fromname= $config->fromname;	$server = str_replace('/components/com_osemsc/ipn','',JURI :: base());		$process= new oseMscIpnPayGate($paygate_id,$paygate_key);		$db= oseDB :: instance();	$where= array();	$where[]= "`order_number`=".$db->quote($process->get('REFERENCE'));	$payment= oseRegistry :: call('payment');	$orderInfo = $payment->getOrder($where, 'obj');	if(empty($orderInfo)) {		$mailsubject= "IPN Fatal Error on your Site";		$mailbody= "Can not search any order information with utilizing the order number feedbacked by The IPN				----------------------------------\n				Invoice: ".$process->get('REFERENCE')."\n";		$emailObj= new stdClass();		$emailObj->subject= $mailsubject;		$emailObj->body= $mailbody;		$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);		$mainframe->redirect($server."index.php?option=com_osemsc&view=register",'Transaction Failed, Order Not Found!');		return;	}		$order_id= $orderInfo->order_id;	$member_id= $orderInfo->user_id;	$orderInfoParams= oseJson :: decode($orderInfo->params);	$returnUrl = JROUTE::_($server."index.php?option=com_osemsc&view=thankyou&order_id=".$orderInfo->order_id);	$returnUrl = $returnUrl?$returnUrl:$server."index.php?option=com_osemsc&view=member";	$amount = $orderInfo->payment_price * 100;		$string = "{$paygate_id}|{$process->get('REFERENCE')}|{$process->get('TRANSACTION_STATUS')}|{$process->get('RESULT_CODE')}|{$process->get('AUTH_CODE')}|{$amount}|{$process->get('RESULT_DESC')}|{$process->get('TRANSACTION_ID')}|{$process->get('RISK_INDICATOR')}|{$paygate_key}";	$checmsum = md5($string);		if($checmsum != $process->get('CHECKSUM'))	{		$mailsubject= "IPN Fatal Error on your site";		$mailbody= "Hello,			a Failed Transaction requires your attention.IPN verify failed			-----------------------------------------------------------			Order ID: ".$Order_Id."\r\n IPN:".http_build_query($_POST);		$emailObj= new stdClass();		$emailObj->subject= $mailsubject;		$emailObj->body= $mailbody;		$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);		$mainframe->redirect($server."index.php?option=com_osemsc&view=register",'Transaction Failed, IPN verify failed!');		return;	}		$TRANSACTION_STATUS = $process->get('TRANSACTION_STATUS');	$RESULT_CODE = $process->get('RESULT_CODE');	$AUTH_CODE = $process->get('AUTH_CODE');	if($TRANSACTION_STATUS == 1&& $RESULT_CODE == '990017' && !empty($AUTH_CODE))	{		$payment= oseRegistry :: call('payment')->getInstance('Order');		$payment->confirmOrder($order_id, array());		$payment->updateOrder($order_id,'confirmed',array('payment_serial_number'=>$process->get('TRANSACTION_ID')));		$mainframe->redirect($returnUrl);	}else{		$mainframe->redirect($server."index.php?option=com_osemsc&view=register",$process->get('RESULT_DESC'));	}	}class oseMscIpnPayGate {	function __construct($paygate_id,$paygate_key) {		// Notify string		$this->paygate_id= $paygate_id;		$this->paygate_key= $paygate_key;		$this->PAYGATE_ID= JRequest :: getVar('PAYGATE_ID');		$this->REFERENCE= JRequest :: getVar('REFERENCE');		$this->TRANSACTION_STATUS= JRequest :: getVar('TRANSACTION_STATUS');		$this->RESULT_CODE= JRequest :: getVar('RESULT_CODE');		$this->AUTH_CODE= JRequest :: getVar('AUTH_CODE');		$this->AMOUNT= JRequest :: getVar('AMOUNT');		$this->RESULT_DESC= JRequest :: getVar('RESULT_DESC');		$this->TRANSACTION_ID= JRequest :: getVar('TRANSACTION_ID');		$this->RISK_INDICATOR= JRequest :: getVar('RISK_INDICATOR');		$this->CHECKSUM= JRequest :: getVar('CHECKSUM');	}		function blockUser($member_id) {		// Block the user immediately;		$db= & JFactory :: getDBO();		$query= "UPDATE `#__users` SET `block` =  '1' WHERE `id` = ".(int) $member_id;		$db->setQuery($query);		$db->query();		// Logout the user as well;//		$query= "DELETE FROM `#__session` WHERE `userid` = ".(int) $member_id." AND `client_id` = 0";//		$db->setQuery($query);//		$db->query();	}	function get($key, $default= null) {		if(empty($this->{$key})) {			$this->{$key}= $default;		}		return $this-> {$key};	}}?>