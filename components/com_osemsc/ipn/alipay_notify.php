<?php/** * @version     5.0 + * @package        Open Source Membership Control - com_osemsc * @subpackage    Open Source Access Control - com_osemsc * @author        Open Source Excellence (R) {@link  http://www.opensource-excellence.com} * @author        Created on 15-Nov-2010 * @license GNU/GPL http://www.gnu.org/copyleft/gpl.html * * *  This program is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with this program.  If not, see <http://www.gnu.org/licenses/>. *  @Copyright Copyright (C) 2010- Open Source Excellence (R); */if ($_POST){	header("HTTP/1.0 200 OK");	//global $mosConfig_absolute_path, $mosConfig_live_site, $mosConfig_lang, $database, $mailfrom, $fromname;	/*** access Joomla's configuration file ***/	// Set flag that this is a parent file	define('_JEXEC', 1);	define('JPATH_BASE', dirname(dirname(dirname(dirname(__FILE__)))));	define('DS', DIRECTORY_SEPARATOR);	require_once(JPATH_BASE.DS.'includes'.DS.'defines.php');	require_once(JPATH_BASE.DS.'includes'.DS.'framework.php');	/**	 * CREATE THE APPLICATION	 *	 * NOTE :	 */	$mainframe= & JFactory :: getApplication('site');	jimport('joomla.plugin.helper');	/*** END of Joomla config ***/	/*** OSE part ***/	require_once(JPATH_BASE.DS."components".DS."com_osemsc".DS."init.php");	/*** END OSE part ***/	$oseMscConfig= oseRegistry :: call('msc')->getConfig(null, 'obj');	$apiEmail= oseRegistry :: call('member')->getInstance('email');	$alipay_partner = $oseMscConfig->alipay_partner;	$alipay_key = $oseMscConfig->alipay_key;   	$seller_email = $oseMscConfig->alipay_seller_email;   	$alipay_transport = $oseMscConfig->alipay_transport;   			$config= new JConfig();	$mailfrom= $config->mailfrom;	$fromname= $config->fromname;		$process= new oseMscIpnAlipay($alipay_partner,$alipay_key,$alipay_transport);		$order_number = $process->get('out_trade_no');	$db= oseDB :: instance();	$where= array();	$where[]= "`order_number`=".$db->quote($order_number);	$payment= oseRegistry :: call('payment');	$orderInfo = $payment->getOrder($where, 'obj');	if(empty($orderInfo)) {		$mailsubject= "IPN Fatal Error on your Site";		$mailbody= "Can not search any order information with utilizing the order number feedbacked by The IPN				----------------------------------\n				Invoice: ".$process->get('out_trade_no')."\n";		$emailObj= new stdClass();		$emailObj->subject= $mailsubject;		$emailObj->body= $mailbody;		$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);		return;	}		$order_id= $orderInfo->order_id;	$member_id= $orderInfo->user_id;	if(!$process->verifyNotify())	{		$mailsubject= "IPN Fatal Error on your site";		$mailbody= "Hello,			a Failed Transaction requires your attention.IPN verify failed			-----------------------------------------------------------			Order ID: ".$order_id."\r\n IPN:".http_build_query($_POST);		$emailObj= new stdClass();		$emailObj->subject= $mailsubject;		$emailObj->body= $mailbody;		$apiEmail->sendToAdminGroup($emailObj, $oseMscConfig->admin_group);			return;	}		$trade_status = $process->get('trade_status');		if($trade_status == 'TRADE_FINISHED' || $trade_status == 'TRADE_SUCCESS')	{		$payment= oseRegistry :: call('payment')->getInstance('Order');		$payment->confirmOrder($order_id, array());		$payment->updateOrder($order_id,'confirmed',array('payment_serial_number'=>$process->get('trade_no')));	}	}class oseMscIpnAlipay {	function __construct($alipay_partner,$alipay_key,$alipay_transport) {		// Notify string		$this->alipay_partner= $alipay_partner;		$this->alipay_key= $alipay_key;		$this->alipay_transport= $alipay_transport;		$this->notify_id= JRequest :: getVar('notify_id');		$this->sign= JRequest :: getVar('sign');		$this->out_trade_no= JRequest :: getVar('out_trade_no');		$this->trade_status= JRequest :: getVar('trade_status');	}		function blockUser($member_id) {		// Block the user immediately;		$db= & JFactory :: getDBO();		$query= "UPDATE `#__users` SET `block` =  '1' WHERE `id` = ".(int) $member_id;		$db->setQuery($query);		$db->query();		// Logout the user as well;//		$query= "DELETE FROM `#__session` WHERE `userid` = ".(int) $member_id." AND `client_id` = 0";//		$db->setQuery($query);//		$db->query();	}	function get($key, $default= null) {		if(empty($this->{$key})) {			$this->{$key}= $default;		}		return $this-> {$key};	}		function verifyNotify(){		if(empty($_POST)) {			return false;		}		else {			$mysign = $this->getMysign($_POST);			$responseTxt = 'true';			if (! empty($_POST["notify_id"])) {$responseTxt = $this->getResponse($_POST["notify_id"]);}			if (preg_match("/true$/i",$responseTxt) && $mysign == $_POST["sign"]) {				return true;			} else {				return false;			}		}	}		function getResponse($notify_id) {		$transport = strtolower(trim($this->alipay_transport));		$partner = trim($this->alipay_partner);		$veryfy_url = '';		if($transport == 'https') {			$veryfy_url = 'https://mapi.alipay.com/gateway.do?service=notify_verify&';		}		else {			$veryfy_url = 'http://notify.alipay.com/trade/notify_query.do?';		}		$veryfy_url = $veryfy_url."partner=" . $partner . "&notify_id=" . $notify_id;		$responseTxt = $this->getHttpResponse($veryfy_url);				return $responseTxt;	}		function getHttpResponse($url, $input_charset = '', $time_out = "60") {		$urlarr     = parse_url($url);		$errno      = "";		$errstr     = "";		$transports = "";		$responseText = "";		if($urlarr["scheme"] == "https") {			$transports = "ssl://";			$urlarr["port"] = "443";		} else {			$transports = "tcp://";			$urlarr["port"] = "80";		}		$fp=@fsockopen($transports . $urlarr['host'],$urlarr['port'],$errno,$errstr,$time_out);		if(!$fp) {			die("ERROR: $errno - $errstr<br />\n");		} else {			if (trim($input_charset) == '') {				fputs($fp, "POST ".$urlarr["path"]." HTTP/1.1\r\n");			}			else {				fputs($fp, "POST ".$urlarr["path"].'?_input_charset='.$input_charset." HTTP/1.1\r\n");			}			fputs($fp, "Host: ".$urlarr["host"]."\r\n");			fputs($fp, "Content-type: application/x-www-form-urlencoded\r\n");			fputs($fp, "Content-length: ".strlen($urlarr["query"])."\r\n");			fputs($fp, "Connection: close\r\n\r\n");			fputs($fp, $urlarr["query"] . "\r\n\r\n");			while(!feof($fp)) {				$responseText .= @fgets($fp, 1024);			}			fclose($fp);			$responseText = trim(stristr($responseText,"\r\n\r\n"),"\r\n");						return $responseText;		}	}	function getMysign($para_temp) {				$para_filter = $this->paraFilter($para_temp);		$para_sort = $this->argSort($para_filter);				$mysign = $this->buildMysign($para_sort, trim($this->alipay_key), 'MD5');				return $mysign;	}		function paraFilter($para) {		$para_filter = array();		while (list ($key, $val) = each ($para)) {			if($key == "sign" || $key == "sign_type" || $val == "")continue;			else	$para_filter[$key] = $para[$key];		}		return $para_filter;	}		function argSort($para) {		ksort($para);		reset($para);		return $para;	}		function buildMysign($sort_para,$key,$sign_type = "MD5") {		$prestr = $this->createLinkstring($sort_para);		$prestr = $prestr.$key;		$mysgin = md5($prestr);		return $mysgin;	}		function createLinkstring($para) {		$arg  = "";		while (list ($key, $val) = each ($para)) {			$arg.=$key."=".$val."&";		}		$arg = substr($arg,0,count($arg)-2);				if(get_magic_quotes_gpc()){$arg = stripslashes($arg);}				return $arg;	}}?>